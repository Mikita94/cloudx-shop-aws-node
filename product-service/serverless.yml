service: product-service
frameworkVersion: '3'

provider:
  environment:
    REGION: eu-central-1
    PRODUCTS_TABLE: Products
    STOCKS_TABLE: Stocks
    NOTIFICATION_EMAIL: mikita.hlukhau@gmail.com
    NOTIFICATION_EMAIL2: mikita_hlukhau@epam.com
    NEW_PRODUCT_SNS_TOPIC_ARN:
      Ref: createProductTopic
  name: aws
  runtime: nodejs18.x
  region: ${self:provider.environment.REGION}
  httpApi:
    cors: true
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:*
          Resource: arn:aws:dynamodb:${self:provider.environment.REGION}:*:*
        - Effect: Allow
          Action:
            - sns:*
          Resource: ${self:provider.environment.NEW_PRODUCT_SNS_TOPIC_ARN}

resources:
  Resources:
    catalogItemsQueue:
      Type: AWS::SQS::Queue
    createProductTopic:
      Type: AWS::SNS::Topic
    createProductSubscription:
      Type: AWS::SNS::Subscription
      DependsOn:
        - createProductTopic
      Properties:
        Protocol: email
        Endpoint: ${self:provider.environment.NOTIFICATION_EMAIL}
        TopicArn:
          Ref: createProductTopic
        FilterPolicy:
          price:
            - numeric:
                - '>='
                - 200
    createProductSubscription2:
      Type: AWS::SNS::Subscription
      DependsOn:
        - createProductTopic
      Properties:
        Protocol: email
        Endpoint: ${self:provider.environment.NOTIFICATION_EMAIL2}
        TopicArn:
          Ref: createProductTopic
        FilterPolicy:
          price:
            - numeric:
                - '<'
                - 200

  Outputs:
    queueUrl:
      Value:
        Ref: catalogItemsQueue
    queueArn:
      Value:
        Fn::GetAtt:
          - catalogItemsQueue
          - Arn

functions:
  getProductsList:
    handler: functions/index.getProductsList
    events:
      - httpApi:
          path: /products
          method: get
          responseData:
            200:
              description: Successful response
              bodyType: GetProductsListResponse
            500:
              description: Unknown server error
              bodyType: ErrorResponse

  getProductById:
    handler: functions/index.getProductById
    events:
      - httpApi:
          path: /products/{productId}
          method: get
          responseData:
            200:
              description: Successful response
              bodyType: Product
            404:
              description: Product not found
              bodyType: ErrorResponse
            500:
              description: Unknown server error
              bodyType: ErrorResponse

  createProduct:
    handler: functions/index.createProduct
    events:
      - httpApi:
          path: /products
          method: post
          bodyType: NewProduct
          responseData:
            200:
              description: Successful response
              bodyType: Product
            400:
              description: Product data is invalid
              bodyType: ErrorResponse
            500:
              description: Unknown server error
              bodyType: ErrorResponse
  catalogBatchProcess:
    handler: functions/index.catalogBatchProcess
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - catalogItemsQueue
              - Arn
          batchSize: 5

plugins:
  - serverless-export-env
  - serverless-auto-swagger
  - serverless-webpack

custom:
  webpack:
    webpackConfig: 'webpack.config.js'
    packager: 'npm'
    includeModules: true
  autoswagger:
    typefiles: ['./interfaces/product.d.ts', './interfaces/api.d.ts']
